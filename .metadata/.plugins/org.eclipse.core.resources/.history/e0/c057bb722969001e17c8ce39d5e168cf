package backend.repositories.vendaGeral;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import backend.entities.geralEntity.VendaGeralFormatadaEntity;
import backend.entities.shopeeEntity.ItemShopeeEntity;
import backend.entities.shopeeEntity.VendaShopeeEntity;
import backend.entities.shopeeEntity.VendaShopeeFormatadaEntity;
import models.DAO;
import models.DbException;

public class VendaGeralRepositoryImpl extends DAO implements VendaGeralRepository {

	public List<VendaGeralFormatadaEntity> findAll() throws SQLException {
		try {
    		this.conectar();
   		 	preparedStatement = this.conexao.prepareStatement(getQuerySearch());
   		 	resultSet = preparedStatement.executeQuery();
   		 	return resultSetToVenda(resultSet);
        } catch (SQLException e) {
       	 	throw new DbException(e.getMessage());
        }
	}
	
	private String getQuerySearch() {
    	StringBuilder sql = new StringBuilder("SELECT venda.ID_VENDA, venda.DATA_VENDA, venda.CONTA, dados.QTDE, item.COD_ITEM, ");
    	sql.append(" venda.CLIENTE, dados.VALOR_UNITARIO, dados.VALOR_TOTAL, dados.VALOR_RECEBIDO, venda.STATUS ");
    	sql.append(" FROM TB_VENDA_SHOPEE venda ");
    	sql.append(" INNER JOIN TB_DADOS_VENDA_SHOPEE dados ON dados.ID_VENDA = venda.ID_VENDA ");
    	sql.append(" INNER JOIN TB_ITEM item ON item.COD_ITEM = dados.COD_ITEM ");
    	sql.append(" WHERE 1 = 1 ");
    	return sql.toString();
    }
	
	private List<VendaShopeeFormatadaEntity> resultSetToVenda(ResultSet resultSet) throws SQLException {
    	List<VendaShopeeEntity> vendas = new ArrayList<>();
    	Long lastId = 0L;
		while (resultSet.next()) {
			ItemShopeeEntity item = new ItemShopeeEntity(
					resultSet.getString(5),
					resultSet.getInt(4),
					resultSet.getDouble(7),
					resultSet.getDouble(8),
					resultSet.getDouble(9));
			if (!lastId.equals(resultSet.getLong(1))) {
				vendas.add(new VendaShopeeEntity(
						resultSet.getLong(1),
						resultSet.getDate(2),
						resultSet.getString(3),
						resultSet.getString(6),
						resultSet.getString(10)));
			}
			vendas.get(vendas.size()-1).addItem(item);
			lastId = resultSet.getLong(1);
    	}
    	this.desconectar(this.conexao);
    	return buildVendaFormatada(vendas);
    }
	
	private List<VendaShopeeFormatadaEntity> buildVendaFormatada(List<VendaShopeeEntity> vendas) {
    	List<VendaShopeeFormatadaEntity> list = new ArrayList<>();
    	
    	for (VendaShopeeEntity venda : vendas) {
    		for (int i = 0; i < venda.getItens().size(); i++) {
    			ItemShopeeEntity item = venda.getItens().get(i);
    			if (i > 0) {
    	    		VendaShopeeFormatadaEntity vendaItem = new VendaShopeeFormatadaEntity(
		    				item.getCodItem(),
			    			item.getQtde(),
			    			item.getValorUnitario(),
			    			item.getValorTotal(),
			    			item.getValorRecebido());
    	    		list.add(vendaItem);
    	    		continue;
    	    	}
    	    	VendaShopeeFormatadaEntity vendaItem = new VendaShopeeFormatadaEntity(
    	    			venda.getId(),
    	    			venda.getData(),
    	    			venda.getConta(),
    	    			venda.getCliente(),
    	    			venda.getStatus(),
    	    			item.getCodItem(),
    	    			item.getQtde(),
    	    			item.getValorUnitario(),
    	    			item.getValorTotal(),
    	    			item.getValorRecebido());
    	    	list.add(vendaItem);
    	    }
    	}
    	return list;
    }
	
}
