package frontend.controllers;

import java.net.URL;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import java.util.ResourceBundle;

import backend.controllers.VendaGeralController;
import backend.controllers.VendaMercadoLivreController;
import backend.controllers.VendaShopeeController;
import frontend.utils.Constants;
import frontend.utils.DataUtils;
import frontend.utils.LoadScene;
import frontend.views.utils.Alerts;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.chart.CategoryAxis;
import javafx.scene.chart.LineChart;
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.PieChart;
import javafx.scene.chart.XYChart;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;

public class DashboardController implements Initializable {

	VendaGeralController geralController = new VendaGeralController();
	VendaShopeeController shopeeController = new VendaShopeeController();
	VendaMercadoLivreController mercadoLivreController = new VendaMercadoLivreController();
	
	@FXML
    private Button btnDashboard;

    @FXML
    private Button btnPorAno;

    @FXML
    private Button btnPorMes;

    @FXML
    private Button btnPorSemestre;

    @FXML
    private Button btnProdutos;

    @FXML
    private Button btnVendas;

    @FXML
    private ComboBox<Integer> cbAno;

    @FXML
    private ComboBox<String> cbMes;

    @FXML
    private ComboBox<String> cbSemestre;

    @FXML
    private PieChart grPorCanal;

    @FXML
    private LineChart<String, Double> graficoLinha;

    @FXML
    private Label txtCancelamentos;

    @FXML
    private TextField txtDataInicio;

    @FXML
    private Label txtDevolucoes;

    @FXML
    private Label txtValorTotal;

    @FXML
    private Label txtVendas;

    @FXML
    private CategoryAxis xAxisLineChart;

    @FXML
    private NumberAxis yAxisLineChart;

    @Override
    public void initialize(URL url, ResourceBundle rb) {
    	cbAno.setItems(FXCollections.observableArrayList(Arrays.asList(2023, 2022, 2021, 2020)));
    	cbSemestre.setItems(FXCollections.observableArrayList(DataUtils.getListSemestres()));
    	cbMes.setItems(FXCollections.observableArrayList(DataUtils.getListMeses()));
    	cbAno.setValue(2023);
    	atualizaDados();
    }
    
    @FXML
    void onProdutosAction(ActionEvent event) {
    	LoadScene.changeScene(Constants.VIEWS.PRODUTOS);
    }
    
    @FXML
    void onVendasAction(ActionEvent event) {
    	LoadScene.changeScene(Constants.VIEWS.VENDAS);
    }

	@FXML
    void onAnoAction(ActionEvent event) {
		atualizaDados();
    }
	
	@FXML
    void onSemestreAction(ActionEvent event) {
		atualizaDados();
    }
	
	@FXML
    void onMesAction(ActionEvent event) {
		atualizaDados();
    }
	
	private void zeraComboBoxes() {
		cbAno.setValue(null);
		cbSemestre.setValue(null);
		cbMes.setValue(null);
	}

	private void atualizaDados() {
		Integer ano = cbAno.getSelectionModel().getSelectedItem();
		String semestre = cbSemestre.getSelectionModel().getSelectedItem();
		Integer mes = DataUtils.converteMesToInt(cbMes.getSelectionModel().getSelectedItem());
		
		if (Objects.isNull(ano))
			return;
		
		Integer[] vendas;
		Double[] valorVendas;
		Integer[] cancelados;
		Integer[] devolvidos;
		List<Double> valorPorMesShopee;
		List<Double> valorPorMesML;
		
		if (Objects.nonNull(mes)) {
			vendas = geralController.countVendasPorAno(ano, mes, mes);
			valorVendas = geralController.findValorTotalPorAno(ano, mes, mes);
			cancelados = geralController.countByStatus(Constants.STATUS.CANCELADO, ano, mes, mes);
			devolvidos = geralController.countByStatus(Constants.STATUS.DEVOLUCAO, ano, mes, mes);
			valorPorMesShopee = shopeeController.findValorTotalPorMes(ano, mes, mes);
			valorPorMesML = mercadoLivreController.findValorTotalPorMes(ano, mes, mes);
		}
		else if (Objects.nonNull(semestre)) {
			if (semestre.equals(Constants.SEMESTRE.PRIMEIRO)) {
				vendas = geralController.countVendasPorAno(ano, 1, 6);
				valorVendas = geralController.findValorTotalPorAno(ano, 1, 6);
				cancelados = geralController.countByStatus(Constants.STATUS.CANCELADO, ano, 1, 6);
				devolvidos = geralController.countByStatus(Constants.STATUS.DEVOLUCAO, ano, 1, 6);
				valorPorMesShopee = shopeeController.findValorTotalPorMes(ano, 1, 6);
				valorPorMesML = mercadoLivreController.findValorTotalPorMes(ano, 1, 6);
			}
			else if (semestre.equals(Constants.SEMESTRE.SEGUNDO)) {
				vendas = geralController.countVendasPorAno(ano, 7, 12);
				valorVendas = geralController.findValorTotalPorAno(ano, 7, 12);
				cancelados = geralController.countByStatus(Constants.STATUS.CANCELADO, ano, 7, 12);
				devolvidos = geralController.countByStatus(Constants.STATUS.DEVOLUCAO, ano, 7, 12);
				valorPorMesShopee = shopeeController.findValorTotalPorMes(ano, 7, 12);
				valorPorMesML = mercadoLivreController.findValorTotalPorMes(ano, 7, 12);
			} else {
				Alerts.showAlert("Campo n√£o preenchido", "Selecione o semestre", null, AlertType.INFORMATION);
				return;
			}
		} else {
			vendas = geralController.countVendasPorAno(ano, 1, 12);
			valorVendas = geralController.findValorTotalPorAno(ano, 1, 12);
			cancelados = geralController.countByStatus(Constants.STATUS.CANCELADO, ano, 1, 12);
			devolvidos = geralController.countByStatus(Constants.STATUS.DEVOLUCAO, ano, 1, 12);
			valorPorMesShopee = shopeeController.findValorTotalPorMes(ano, 1, 12);
			valorPorMesML = mercadoLivreController.findValorTotalPorMes(ano, 1, 12);
		}
		
		txtVendas.setText(vendas[0].toString());
		txtValorTotal.setText(valorVendas[0].toString());
		txtCancelamentos.setText(cancelados[0].toString());
		txtDevolucoes.setText(devolvidos[0].toString());		
		
		ObservableList<PieChart.Data> pieData = FXCollections.observableArrayList(
    			new PieChart.Data(Constants.LOJA.SHOPEE, calculaPercent(vendas[1], vendas[0])),
    			new PieChart.Data(Constants.LOJA.MERCADO_LIVRE, calculaPercent(vendas[2], vendas[0])));
    	grPorCanal.setData(pieData);
    	prepareLineChart(valorPorMesShopee, valorPorMesML);
	}
	
	private void prepareLineChart(List<Double> shopee, List<Double> mercadoLivre) {
		graficoLinha.getData().clear();
		XYChart.Series<String, Double> lineShopee = new XYChart.Series<>();
		lineShopee.setName(Constants.LOJA.SHOPEE);
		setLineChartValues(lineShopee, shopee);
		XYChart.Series<String, Double> lineML = new XYChart.Series<>();
		lineML.setName(Constants.LOJA.MERCADO_LIVRE);
		setLineChartValues(lineML, mercadoLivre);
		
		graficoLinha.getData().addAll(lineShopee, lineML);
	}
	
	private void setLineChartValues(XYChart.Series<String, Double> line, List<Double> values) {
		line.getData().add(new XYChart.Data<>(Constants.MES.JAN, values.get(0)));
		line.getData().add(new XYChart.Data<>(Constants.MES.FEV, values.get(1)));
		line.getData().add(new XYChart.Data<>(Constants.MES.MAR, values.get(2)));
		line.getData().add(new XYChart.Data<>(Constants.MES.ABR, values.get(3)));
		line.getData().add(new XYChart.Data<>(Constants.MES.MAI, values.get(4)));
		line.getData().add(new XYChart.Data<>(Constants.MES.JUN, values.get(5)));
		line.getData().add(new XYChart.Data<>(Constants.MES.JUL, values.get(6)));
		line.getData().add(new XYChart.Data<>(Constants.MES.AGO, values.get(7)));
		line.getData().add(new XYChart.Data<>(Constants.MES.SET, values.get(8)));
		line.getData().add(new XYChart.Data<>(Constants.MES.OUT, values.get(9)));
		line.getData().add(new XYChart.Data<>(Constants.MES.NOV, values.get(10)));
		line.getData().add(new XYChart.Data<>(Constants.MES.DEZ, values.get(11)));
	}
	
	private Double calculaPercent(Integer divisor, Integer dividendo) {
		if (dividendo != 0)
			return Double.valueOf(divisor) / Double.valueOf(dividendo) * 100;
		return 0D;
	}
	
	@FXML
    void onPorAnoAction(ActionEvent event) {
		cbSemestre.setVisible(Boolean.FALSE);
		cbMes.setVisible(Boolean.FALSE);
		zeraComboBoxes();
		cbAno.setValue(Constants.ANO._2023);
		atualizaDados();
    }

    @FXML
    void onPorMesAction(ActionEvent event) {
		cbSemestre.setVisible(Boolean.FALSE);
		cbMes.setVisible(Boolean.TRUE);
		zeraComboBoxes();
		cbMes.setValue(Constants.MES.JANEIRO);
		atualizaDados();
    }

    @FXML
    void onPorSemestreAction(ActionEvent event) {
		cbSemestre.setVisible(Boolean.TRUE);
		cbMes.setVisible(Boolean.FALSE);
		zeraComboBoxes();
		cbSemestre.setValue(Constants.SEMESTRE.PRIMEIRO);
		atualizaDados();
    }

}
